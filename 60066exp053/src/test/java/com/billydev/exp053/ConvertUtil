import org.apache.commons.codec.DecoderException;
import org.apache.commons.codec.binary.Hex;

public class ConvertUtil {

    //DUP_NUMBER_OF_CHARS from 1 to 5
    public static final int DUP_NUMBER_OF_CHARS = 2;
    public static final int CHAR_NUMBER_PER_LINE = 20/2*3*2; //effective char is 18, 2 char for

    public static String encodeUsingApacheCommons(byte[] bytes)
            throws DecoderException {
        return Hex.encodeHexString(bytes);
    }

    public static byte[] decodeUsingApacheCommons(String hexString)
            throws DecoderException {
        return Hex.decodeHex(hexString);

    }

    public static String splitDupAndCapAndReplaceZeroWithOther(String hexString) {
        char[] chars = hexString.toCharArray();
        char[] outputChars = new char[hexString.length() * (DUP_NUMBER_OF_CHARS + 1)];

        for (int i = 0; i < chars.length; i++) {
            int totalDupCharNumber = DUP_NUMBER_OF_CHARS + 1;
            int beginIndex = i * totalDupCharNumber;
            int currentOutCharIndex = 0;
            for (int j = 0; j < DUP_NUMBER_OF_CHARS; j++) {
                int indexInOutChar = beginIndex + j;
                outputChars[indexInOutChar] = chars[i];
                currentOutCharIndex = indexInOutChar;
            }
            outputChars[currentOutCharIndex+1] = 32;
        }
        return new String(outputChars).toUpperCase().replace("0","K");
    }


    //for the other side
    public static String lowerDedupAndMerge(String splitDupAndCapString) {
        char[] chars = splitDupAndCapString.toLowerCase().toCharArray();
        int deduplicatedCharArrayLength = splitDupAndCapString.length() / (DUP_NUMBER_OF_CHARS + 1);
        char[] outputChars = new char[deduplicatedCharArrayLength];

        for (int i = 0; i < deduplicatedCharArrayLength; i++) {
            outputChars[i] = chars[i * (DUP_NUMBER_OF_CHARS + 1)];
        }
        return new String(outputChars);
    }

    public static String[] splitIntoLines(String input) {
        int lineNumber=input.length()/ CHAR_NUMBER_PER_LINE +1;
        String[] outputString = new String[lineNumber];
        char[] chars=input.toCharArray();
        for (int i = 0; i < lineNumber; i++) {
            char[] lineChars = new char[CHAR_NUMBER_PER_LINE];
            for (int j = 0; j < CHAR_NUMBER_PER_LINE; j++) {
                if(i * CHAR_NUMBER_PER_LINE + j<chars.length) {
                    lineChars[j] = chars[i * CHAR_NUMBER_PER_LINE + j];
                }
            }
            outputString[i] = new String(lineChars);
        }
        return outputString;
    }

    public static void displayStringArray(String[] stringArray) {

    }



}
